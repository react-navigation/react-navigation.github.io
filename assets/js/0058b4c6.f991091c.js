"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["11489"],{67136:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"7.x","label":"7.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-7.x","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Fundamentals","items":[{"type":"link","label":"Getting started","href":"/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Hello React Navigation","href":"/docs/hello-react-navigation","docId":"hello-react-navigation","unlisted":false},{"type":"link","label":"Moving between screens","href":"/docs/navigating","docId":"navigating","unlisted":false},{"type":"link","label":"Passing parameters to routes","href":"/docs/params","docId":"params","unlisted":false},{"type":"link","label":"Configuring the header bar","href":"/docs/headers","docId":"headers","unlisted":false},{"type":"link","label":"Header buttons","href":"/docs/header-buttons","docId":"header-buttons","unlisted":false},{"type":"link","label":"Nesting navigators","href":"/docs/nesting-navigators","docId":"nesting-navigators","unlisted":false},{"type":"link","label":"Navigation lifecycle","href":"/docs/navigation-lifecycle","docId":"navigation-lifecycle","unlisted":false},{"type":"link","label":"Next steps","href":"/docs/next-steps","docId":"next-steps","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"Authentication flows","href":"/docs/auth-flow","docId":"auth-flow","unlisted":false},{"type":"link","label":"Supporting safe areas","href":"/docs/handling-safe-area","docId":"handling-safe-area","unlisted":false},{"type":"link","label":"Customizing tab bar","href":"/docs/customizing-tabbar","docId":"customizing-tabbar","unlisted":false},{"type":"link","label":"Hiding tab bar in screens","href":"/docs/hiding-tabbar-in-screens","docId":"hiding-tabbar-in-screens","unlisted":false},{"type":"link","label":"Status bar configuration","href":"/docs/status-bar","docId":"status-bar","unlisted":false},{"type":"link","label":"Opening a modal","href":"/docs/modal","docId":"modal","unlisted":false},{"type":"link","label":"Multiple drawers","href":"/docs/multiple-drawers","docId":"multiple-drawers","unlisted":false},{"type":"link","label":"Options with nested navigators","href":"/docs/screen-options-resolution","docId":"screen-options-resolution","unlisted":false},{"type":"link","label":"Android back button behavior","href":"/docs/custom-android-back-button-handling","docId":"custom-android-back-button-handling","unlisted":false},{"type":"link","label":"Shared element transitions","href":"/docs/shared-element-transitions","docId":"shared-element-transitions","unlisted":false},{"type":"link","label":"Preventing going back","href":"/docs/preventing-going-back","docId":"preventing-going-back","unlisted":false},{"type":"link","label":"Call a function on focus","href":"/docs/function-after-focusing-screen","docId":"function-after-focusing-screen","unlisted":false},{"type":"link","label":"Navigation Ref","href":"/docs/navigating-without-navigation-prop","docId":"navigating-without-navigation-prop","unlisted":false},{"type":"link","label":"Deep linking","href":"/docs/deep-linking","docId":"deep-linking","unlisted":false},{"type":"link","label":"Configuring links","href":"/docs/configuring-links","docId":"configuring-links","unlisted":false},{"type":"link","label":"Web support","href":"/docs/web-support","docId":"web-support","unlisted":false},{"type":"link","label":"Server rendering","href":"/docs/server-rendering","docId":"server-rendering","unlisted":false},{"type":"link","label":"Screen tracking","href":"/docs/screen-tracking","docId":"screen-tracking","unlisted":false},{"type":"link","label":"Themes","href":"/docs/themes","docId":"themes","unlisted":false},{"type":"link","label":"State persistence","href":"/docs/state-persistence","docId":"state-persistence","unlisted":false},{"type":"link","label":"Static and dynamic APIs","href":"/docs/combine-static-with-dynamic","docId":"combine-static-with-dynamic","unlisted":false},{"type":"link","label":"Writing tests","href":"/docs/testing","docId":"testing","unlisted":false},{"type":"link","label":"Configuring TypeScript","href":"/docs/typescript","docId":"typescript","unlisted":false},{"type":"link","label":"Troubleshooting","href":"/docs/troubleshooting","docId":"troubleshooting","unlisted":false},{"type":"link","label":"Upgrading from 6.x","href":"/docs/upgrading-from-6.x","docId":"upgrading-from-6.x","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Navigators","items":[{"type":"link","label":"Stack","href":"/docs/stack-navigator","docId":"stack-navigator","unlisted":false},{"type":"link","label":"Native Stack","href":"/docs/native-stack-navigator","docId":"native-stack-navigator","unlisted":false},{"type":"link","label":"Bottom Tabs","href":"/docs/bottom-tab-navigator","docId":"bottom-tab-navigator","unlisted":false},{"type":"link","label":"Native Bottom Tabs","href":"/docs/native-bottom-tab-navigator","docId":"native-bottom-tab-navigator","unlisted":false},{"type":"link","label":"Drawer","href":"/docs/drawer-navigator","docId":"drawer-navigator","unlisted":false},{"type":"link","label":"Material Top Tabs","href":"/docs/material-top-tab-navigator","docId":"material-top-tab-navigator","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Libraries","items":[{"type":"link","label":"Developer tools","href":"/docs/devtools","docId":"devtools","unlisted":false},{"type":"link","label":"Elements","href":"/docs/elements","docId":"elements","unlisted":false},{"type":"link","label":"Tab View","href":"/docs/tab-view","docId":"tab-view","unlisted":false},{"type":"link","label":"Drawer Layout","href":"/docs/drawer-layout","docId":"drawer-layout","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"API reference","items":[{"type":"link","label":"Static configuration","href":"/docs/static-configuration","docId":"static-configuration","unlisted":false},{"type":"link","label":"NavigationContainer","href":"/docs/navigation-container","docId":"navigation-container","unlisted":false},{"type":"link","label":"ServerContainer","href":"/docs/server-container","docId":"server-container","unlisted":false},{"type":"link","label":"Navigator","href":"/docs/navigator","docId":"navigator","unlisted":false},{"type":"link","label":"Group","href":"/docs/group","docId":"group","unlisted":false},{"type":"link","label":"Screen","href":"/docs/screen","docId":"screen","unlisted":false},{"type":"link","label":"Options for screens","href":"/docs/screen-options","docId":"screen-options","unlisted":false},{"type":"link","label":"Route object","href":"/docs/route-object","docId":"route-object","unlisted":false},{"type":"link","label":"Navigation object","href":"/docs/navigation-object","docId":"navigation-object","unlisted":false},{"type":"link","label":"NavigationContext","href":"/docs/navigation-context","docId":"navigation-context","unlisted":false},{"type":"link","label":"Navigation events","href":"/docs/navigation-events","docId":"navigation-events","unlisted":false},{"type":"link","label":"Navigation state","href":"/docs/navigation-state","docId":"navigation-state","unlisted":false},{"type":"link","label":"Link","href":"/docs/link","docId":"link","unlisted":false},{"type":"category","collapsible":true,"label":"Hooks","items":[{"type":"link","label":"useNavigation","href":"/docs/use-navigation","docId":"use-navigation","unlisted":false},{"type":"link","label":"useRoute","href":"/docs/use-route","docId":"use-route","unlisted":false},{"type":"link","label":"useNavigationState","href":"/docs/use-navigation-state","docId":"use-navigation-state","unlisted":false},{"type":"link","label":"useFocusEffect","href":"/docs/use-focus-effect","docId":"use-focus-effect","unlisted":false},{"type":"link","label":"useIsFocused","href":"/docs/use-is-focused","docId":"use-is-focused","unlisted":false},{"type":"link","label":"usePreventRemove","href":"/docs/use-prevent-remove","docId":"use-prevent-remove","unlisted":false},{"type":"link","label":"useRoutePath","href":"/docs/use-route-path","docId":"use-route-path","unlisted":false},{"type":"link","label":"useLinkTo","href":"/docs/use-link-to","docId":"use-link-to","unlisted":false},{"type":"link","label":"useLinkProps","href":"/docs/use-link-props","docId":"use-link-props","unlisted":false},{"type":"link","label":"useLinkBuilder","href":"/docs/use-link-builder","docId":"use-link-builder","unlisted":false},{"type":"link","label":"useScrollToTop","href":"/docs/use-scroll-to-top","docId":"use-scroll-to-top","unlisted":false},{"type":"link","label":"useTheme","href":"/docs/use-theme","docId":"use-theme","unlisted":false}],"collapsed":false},{"type":"category","collapsible":true,"label":"Actions","items":[{"type":"link","label":"CommonActions","href":"/docs/navigation-actions","docId":"navigation-actions","unlisted":false},{"type":"link","label":"StackActions","href":"/docs/stack-actions","docId":"stack-actions","unlisted":false},{"type":"link","label":"DrawerActions","href":"/docs/drawer-actions","docId":"drawer-actions","unlisted":false},{"type":"link","label":"TabActions","href":"/docs/tab-actions","docId":"tab-actions","unlisted":false}],"collapsed":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Build your own Navigator","items":[{"type":"link","label":"Custom routers","href":"/docs/custom-routers","docId":"custom-routers","unlisted":false},{"type":"link","label":"Custom navigators","href":"/docs/custom-navigators","docId":"custom-navigators","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Ecosystem","items":[{"type":"link","label":"Community solutions","href":"/docs/community-solutions","docId":"community-solutions","unlisted":false},{"type":"link","label":"Community navigators","href":"/docs/community-navigators","docId":"community-navigators","unlisted":false},{"type":"link","label":"Community libraries","href":"/docs/community-libraries","docId":"community-libraries","unlisted":false},{"type":"link","label":"More resources","href":"/docs/more-resources","docId":"more-resources","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Meta","items":[{"type":"link","label":"Migration Guides","href":"/docs/migration-guides","docId":"migration-guides","unlisted":false},{"type":"link","label":"Glossary of terms","href":"/docs/glossary-of-terms","docId":"glossary-of-terms","unlisted":false},{"type":"link","label":"Pitch & anti-pitch","href":"/docs/pitch","docId":"pitch","unlisted":false},{"type":"link","label":"Limitations","href":"/docs/limitations","docId":"limitations","unlisted":false},{"type":"link","label":"Apps using React Navigation","href":"/docs/used-by","docId":"used-by","unlisted":false},{"type":"link","label":"Contributing","href":"/docs/contributing","docId":"contributing","unlisted":false}],"collapsed":false,"collapsible":true}]},"docs":{"auth-flow":{"id":"auth-flow","title":"Authentication flows","description":"Most apps require that a user authenticates in some way to have access to data associated with a user or other private content. Typically the flow will look like this:","sidebar":"docs"},"bottom-tab-navigator":{"id":"bottom-tab-navigator","title":"Bottom Tabs Navigator","description":"A simple tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused.","sidebar":"docs"},"combine-static-with-dynamic":{"id":"combine-static-with-dynamic","title":"Combining static and dynamic APIs","description":"While the static API has many advantages, it doesn\'t fit use cases where the navigation configuration needs to be dynamic. So React Navigation supports interop between the static and dynamic APIs.","sidebar":"docs"},"community-libraries":{"id":"community-libraries","title":"Community libraries","description":"This guide lists various community libraries that can be used alongside React Navigation to enhance its functionality.","sidebar":"docs"},"community-navigators":{"id":"community-navigators","title":"Community navigators","description":"This guide lists various community navigators for React Navigation. These navigators offer provide UI components for navigation with the familiar React Navigation API.","sidebar":"docs"},"community-solutions":{"id":"community-solutions","title":"Community solutions","description":"This guide lists various community navigation solutions built on top of React Navigation that offer a different API or complement React Navigation in some way.","sidebar":"docs"},"configuring-links":{"id":"configuring-links","title":"Configuring links","description":"In this guide, we will configure React Navigation to handle external links. This is necessary if you want to:","sidebar":"docs"},"contributing":{"id":"contributing","title":"React Navigation contributor guide","description":"Want to help improve React Navigation? Your help would be greatly appreciated!","sidebar":"docs"},"custom-android-back-button-handling":{"id":"custom-android-back-button-handling","title":"Custom Android back button behavior","description":"By default, when user presses the Android hardware back button, react-navigation will pop a screen or exit the app if there are no screens to pop. This is a sensible default behavior, but there are situations when you might want to implement custom handling.","sidebar":"docs"},"custom-navigators":{"id":"custom-navigators","title":"Custom navigators","description":"In essence, a navigator is a React component that takes a set of screens and options, and renders them based on its navigation state, generally with additional UI such as headers, tab bars, or drawers.","sidebar":"docs"},"custom-routers":{"id":"custom-routers","title":"Custom routers","description":"The router object provides various helper methods to deal with the state and actions, a reducer to update the state as well as some action creators.","sidebar":"docs"},"customizing-tabbar":{"id":"customizing-tabbar","title":"Customizing bottom tab bar","description":"This guide covers customizing the tab bar in createBottomTabNavigator. Make sure to install and configure the library according to the installation instructions first.","sidebar":"docs"},"deep-linking":{"id":"deep-linking","title":"Deep linking","description":"This guide will describe how to configure your app to handle deep links on various platforms. To handle incoming links, you need to handle 2 scenarios:","sidebar":"docs"},"devtools":{"id":"devtools","title":"Developer tools","description":"Developer tools to make debugging easier when using React Navigation.","sidebar":"docs"},"drawer-actions":{"id":"drawer-actions","title":"DrawerActions reference","description":"DrawerActions is an object containing methods for generating actions specific to drawer-based navigators. Its methods expand upon the actions available in CommonActions.","sidebar":"docs"},"drawer-based-navigation":{"id":"drawer-based-navigation","title":"Drawer navigation","description":"Common pattern in navigation is to use drawer from left (sometimes right) side for navigating between screens."},"drawer-layout":{"id":"drawer-layout","title":"React Native Drawer Layout","description":"A cross-platform Drawer component for React Native implemented using react-native-gesture-handler and react-native-reanimated on native platforms and CSS transitions on Web.","sidebar":"docs"},"drawer-navigator":{"id":"drawer-navigator","title":"Drawer Navigator","description":"Drawer Navigator renders a navigation drawer on the side of the screen which can be opened and closed via gestures.","sidebar":"docs"},"elements":{"id":"elements","title":"Elements Library","description":"A component library containing the UI elements and helpers used in React Navigation. It can be useful if you\'re building your own navigator, or want to reuse a default functionality in your app.","sidebar":"docs"},"function-after-focusing-screen":{"id":"function-after-focusing-screen","title":"Call a function when focused screen changes","description":"In this guide we will call a function or render something on screen focusing. This is useful for making additional API calls when a user revisits a particular screen in a Tab Navigator, or to track user events as they tap around our app.","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting started","description":"What follows within the Fundamentals section of this documentation is a tour of the most important aspects of React Navigation. It should cover enough for you to know how to build your typical small mobile application, and give you the background that you need to dive deeper into the more advanced parts of React Navigation.","sidebar":"docs"},"glossary-of-terms":{"id":"glossary-of-terms","title":"Glossary of terms","description":"This is a new section of the documentation and it\'s missing a lot of terms! Please submit a pull request or an issue with a term that you think should be explained here.","sidebar":"docs"},"group":{"id":"group","title":"Group","description":"A group contains several screens inside a navigator for organizational purposes. They can also be used to apply the same options such as header styles to a group of screens, or to define a common layout etc.","sidebar":"docs"},"handling-safe-area":{"id":"handling-safe-area","title":"Supporting safe areas","description":"By default, React Navigation tries to ensure that the elements of the navigators display correctly on devices with notches (e.g. iPhone X) and UI elements which may overlap the app content. Such items include:","sidebar":"docs"},"header-buttons":{"id":"header-buttons","title":"Header buttons","description":"Now that we know how to customize the look of our headers, let\'s make them sentient! Actually perhaps that\'s ambitious, let\'s just make them able to respond to our touches in very well-defined ways.","sidebar":"docs"},"headers":{"id":"headers","title":"Configuring the header bar","description":"We\'ve seen how to configure the header title already, but let\'s go over that again before moving on to some other options &mdash; repetition is key to learning!","sidebar":"docs"},"hello-react-navigation":{"id":"hello-react-navigation","title":"Hello React Navigation","description":"In a web browser, you can link to different pages using an anchor (``) tag. When the user clicks on a link, the URL is pushed to the browser history stack. When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page. React Native doesn\'t have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.","sidebar":"docs"},"hiding-tabbar-in-screens":{"id":"hiding-tabbar-in-screens","title":"Hiding tab bar in specific screens","description":"Sometimes we may want to hide the tab bar in specific screens in a stack navigator nested in a tab navigator. Let\'s say we have 5 screens","sidebar":"docs"},"limitations":{"id":"limitations","title":"Limitations","description":"As a potential user of the library, it\'s important to know what you can and cannot do with it. Armed with this knowledge, you may choose to adopt a different library such as react-native-navigation instead. We discuss the high level design decisions in the pitch & anti-pitch section, and here we will cover some of the use cases that are either not supported or are so difficult to do that they may as well be impossible. If any of the following limitations are dealbreakers for your app, React Navigation might not be for you.","sidebar":"docs"},"link":{"id":"link","title":"Link","description":"The Link component renders a component that can navigate to a screen on press. This renders a ` tag when used on the Web and uses a Text component on other platforms. It preserves the default behavior of anchor tags in the browser such as Right click -> Open link in new tab\\", Ctrl+Click/\u2318+Click` etc. to provide a native experience.","sidebar":"docs"},"material-top-tab-navigator":{"id":"material-top-tab-navigator","title":"Material Top Tabs Navigator","description":"A material-design themed tab bar on the top of the screen that lets you switch between different routes by tapping the tabs or swiping horizontally. Transitions are animated by default. Screen components for each route are mounted immediately.","sidebar":"docs"},"migration-guides":{"id":"migration-guides","title":"Migration Guides","description":"This page contains links to pages that will guide you through the process of upgrading React Navigation:","sidebar":"docs"},"modal":{"id":"modal","title":"Opening a modal","description":"Modal shown on screen","sidebar":"docs"},"more-resources":{"id":"more-resources","title":"More resources","description":"Talks","sidebar":"docs"},"multiple-drawers":{"id":"multiple-drawers","title":"Multiple drawers","description":"Sometimes we want to have multiple drawers on the same screen","sidebar":"docs"},"native-bottom-tab-navigator":{"id":"native-bottom-tab-navigator","title":"Native Bottom Tabs Navigator","description":"This navigator is currently experimental. The API will change in future releases.","sidebar":"docs"},"native-stack-navigator":{"id":"native-stack-navigator","title":"Native Stack Navigator","description":"Native Stack Navigator provides a way for your app to transition between screens where each new screen is placed on top of a stack.","sidebar":"docs"},"navigating":{"id":"navigating","title":"Moving between screens","description":"In the previous section, we defined a stack navigator with two routes (Home and Details), but we didn\'t learn how to let a user navigate from Home to Details (although we did learn how to change the initial route in our code, but forcing our users to clone our repository and change the route in our code in order to see another screen is arguably among the worst user experiences one could imagine).","sidebar":"docs"},"navigating-without-navigation-prop":{"id":"navigating-without-navigation-prop","title":"Navigating without the navigation prop","description":"Sometimes you need to trigger a navigation action from places where you do not have access to the navigation object, such as a Redux middleware. For such cases, you can dispatch navigation actions use a ref on the navigation container.","sidebar":"docs"},"navigation-actions":{"id":"navigation-actions","title":"CommonActions reference","description":"A navigation action is an object containing at least a type property. Internally, the action can be handled by routers with the getStateForAction method to return a new state from an existing navigation state.","sidebar":"docs"},"navigation-container":{"id":"navigation-container","title":"NavigationContainer","description":"The NavigationContainer is responsible for managing your app\'s navigation state and linking your top-level navigator to the app environment.","sidebar":"docs"},"navigation-context":{"id":"navigation-context","title":"NavigationContext","description":"NavigationContext provides the navigation object (same object as the navigation prop). In fact, useNavigation uses this context to get the navigation prop.","sidebar":"docs"},"navigation-events":{"id":"navigation-events","title":"Navigation events","description":"You can listen to various events emitted by React Navigation to get notified of certain events, and in some cases, override the default action. There are few core events such as focus, blur etc. (documented below) that work for every navigator, as well as navigator specific events that work only for certain navigators.","sidebar":"docs"},"navigation-lifecycle":{"id":"navigation-lifecycle","title":"Navigation lifecycle","description":"In a previous section, we worked with a stack navigator that has two screens (Home and Profile) and learned how to use navigation.navigate(\'RouteName\') to navigate between the screens.","sidebar":"docs"},"navigation-object":{"id":"navigation-object","title":"Navigation object reference","description":"The navigation object contains various convenience functions that dispatch navigation actions. It looks like this:","sidebar":"docs"},"navigation-state":{"id":"navigation-state","title":"Navigation state reference","description":"The navigation state is the state where React Navigation stores the navigation structure and history of the app. It\'s useful to know about the structure of the navigation state if you need to do advanced operations such as resetting the state, providing a custom initial state etc.","sidebar":"docs"},"navigator":{"id":"navigator","title":"Navigator","description":"A navigator is responsible for managing and rendering a set of screens. It can be created using the createXNavigator functions, e.g. createStackNavigator, createNativeStackNavigator, createBottomTabNavigator, createMaterialTopTabNavigator, createDrawerNavigator etc.:","sidebar":"docs"},"nesting-navigators":{"id":"nesting-navigators","title":"Nesting navigators","description":"Nesting navigators means rendering a navigator inside a screen of another navigator, for example:","sidebar":"docs"},"next-steps":{"id":"next-steps","title":"Next steps","description":"You are now familiar with how to create a stack navigator, configure it on your screen components, navigate between routes, and display modals. Stack navigators and their related APIs will be the most frequently used tools in your React Navigation toolbelt, but there are problems that they don\'t solve. For example, you can\'t build tab-based navigation using a stack navigator &mdash; for that, you need to use a Bottom Tabs Navigator.","sidebar":"docs"},"params":{"id":"params","title":"Passing parameters to routes","description":"Remember when I said \\"more on that later when we talk about params!\\"? Well, the time has come.","sidebar":"docs"},"pitch":{"id":"pitch","title":"Pitch & anti-pitch","description":"It\'s useful when considering whether or not to use a project to understand the tradeoffs that the developers of the project made when building it. What problems does it explicitly try to solve for you, and which ones does it ignore? What are the current limitations of the project and common problems that people encounter? These are the kinds of questions that we believe you should have answers to when making an important technology decision for your project, and so we have documented answers to these questions as best we can here, in the form of a \\"pitch\\" (why you should use it) and \\"anti-pitch\\" (why you should not use it). Please submit a pull request if you believe we have omitted important information!","sidebar":"docs"},"preventing-going-back":{"id":"preventing-going-back","title":"Preventing going back","description":"Sometimes you may want to prevent the user from leaving a screen to avoid losing unsaved changes. There are a couple of things you may want to do in this case:","sidebar":"docs"},"route-object":{"id":"route-object","title":"Route object reference","description":"Each screen component in your app is provided with the route object as a prop automatically. The prop contains various information regarding current route (place in navigation hierarchy component lives).","sidebar":"docs"},"screen":{"id":"screen","title":"Screen","description":"A screen represents routes in a navigator. A screen\'s configuration contains the component for the route, options, event listeners, etc.","sidebar":"docs"},"screen-options":{"id":"screen-options","title":"Options for screens","description":"Each screen can configure various aspects about how it gets presented in the navigator that renders it by specifying certain options, for example, the header title in stack navigator, tab bar icon in bottom tab navigator etc. Different navigators support different set of options.","sidebar":"docs"},"screen-options-resolution":{"id":"screen-options-resolution","title":"Screen options with nested navigators","description":"In this document we\'ll explain how screen options work when there are multiple navigators. It\'s important to understand this so that you put your options in the correct place and can properly configure your navigators. If you put them in the wrong place, at best nothing will happen and at worst something confusing and unexpected will happen.","sidebar":"docs"},"screen-tracking":{"id":"screen-tracking","title":"Screen tracking for analytics","description":"To track the currently active screen, we need to:","sidebar":"docs"},"server-container":{"id":"server-container","title":"ServerContainer","description":"The ServerContainer component provides utilities to render your app on server with the correct navigation state.","sidebar":"docs"},"server-rendering":{"id":"server-rendering","title":"Server rendering","description":"This guide will cover how to server render your React Native app using React Native for Web and React Navigation. We\'ll cover the following cases:","sidebar":"docs"},"shared-element-transitions":{"id":"shared-element-transitions","title":"Animating elements between screens","description":"This guide covers how to animate elements between screens. This feature is known as a Shared Element Transition and it\'s implemented in the @react-navigation/native-stack with React Native Reanimated.","sidebar":"docs"},"stack-actions":{"id":"stack-actions","title":"StackActions reference","description":"StackActions is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in CommonActions.","sidebar":"docs"},"stack-navigator":{"id":"stack-navigator","title":"Stack Navigator","description":"Stack Navigator provides a way for your app to transition between screens where each new screen is placed on top of a stack.","sidebar":"docs"},"state-persistence":{"id":"state-persistence","title":"State persistence","description":"You might want to save the user\'s location in the app, so that they are immediately returned to the same location after the app is restarted.","sidebar":"docs"},"static-configuration":{"id":"static-configuration","title":"Static configuration","description":"The bulk of the static configuration is done using the createXNavigator functions, e.g. createNativeStackNavigator, createBottomTabNavigator, createDrawerNavigator etc. We\'ll refer to these functions as createXNavigator in the rest of this guide.","sidebar":"docs"},"status-bar":{"id":"status-bar","title":"Different status bar configuration based on route","description":"If you don\'t have a navigation header, or your navigation header changes color based on the route, you\'ll want to ensure that the correct color is used for the content.","sidebar":"docs"},"tab-actions":{"id":"tab-actions","title":"TabActions reference","description":"TabActions is an object containing methods for generating actions specific to tab-based navigators. Its methods expand upon the actions available in CommonActions.","sidebar":"docs"},"tab-view":{"id":"tab-view","title":"React Native Tab View","description":"React Native Tab View is a cross-platform Tab View component for React Native implemented using react-native-pager-view on Android & iOS, and PanResponder on Web, macOS, and Windows.","sidebar":"docs"},"testing":{"id":"testing","title":"Writing tests","description":"React Navigation components can be tested in a similar way to other React components. This guide will cover how to write tests for components using React Navigation using Jest.","sidebar":"docs"},"themes":{"id":"themes","title":"Themes","description":"Themes allow you to change the colors and fonts of various components provided by React Navigation. You can use themes to:","sidebar":"docs"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"This section attempts to outline issues that users frequently encounter when first getting accustomed to using React Navigation. These issues may or may not be related to React Navigation itself.","sidebar":"docs"},"typescript":{"id":"typescript","title":"Type checking with TypeScript","description":"React Navigation can be configured to type-check screens and their params, as well as various other APIs using TypeScript. This provides better intelliSense and type safety when working with React Navigation.","sidebar":"docs"},"upgrading-from-6.x":{"id":"upgrading-from-6.x","title":"Upgrading from 6.x","description":"React Navigation 7 focuses on streamlining the API to avoid patterns that can cause bugs. This means deprecating some of the legacy behavior kept for backward compatibility reasons.","sidebar":"docs"},"use-focus-effect":{"id":"use-focus-effect","title":"useFocusEffect","description":"Sometimes we want to run side-effects when a screen is focused. A side effect may involve things like adding an event listener, fetching data, updating document title, etc. While this can be achieved using focus and blur events, it\'s not very ergonomic.","sidebar":"docs"},"use-is-focused":{"id":"use-is-focused","title":"useIsFocused","description":"We might want to render different content based on the current focus state of the screen. The library exports a useIsFocused hook to make this easier:","sidebar":"docs"},"use-link-builder":{"id":"use-link-builder","title":"useLinkBuilder","description":"The useLinkBuilder hook returns helpers to build href or action based on the linking configuration. It returns an object with the following properties:","sidebar":"docs"},"use-link-props":{"id":"use-link-props","title":"useLinkProps","description":"The useLinkProps hook lets us build our custom link component. The link component can be used as a button to navigate to a screen. On the web, it will be rendered as an anchor tag (`) with the href attribute so that all the accessibility features of a link are preserved, e.g. - such as Right click -> Open link in new tab\\", Ctrl+Click/\u2318+Click` etc.","sidebar":"docs"},"use-link-to":{"id":"use-link-to","title":"useLinkTo","description":"The useLinkTo hook lets us navigate to a screen using a path instead of a screen name based on the linking options. It returns a function that receives the path to navigate to.","sidebar":"docs"},"use-navigation":{"id":"use-navigation","title":"useNavigation","description":"useNavigation is a hook that gives access to navigation object. It\'s useful when you cannot pass the navigation object as a prop to the component directly, or don\'t want to pass it in case of a deeply nested child.","sidebar":"docs"},"use-navigation-state":{"id":"use-navigation-state","title":"useNavigationState","description":"useNavigationState is a hook which gives access to the navigation state of the navigator which contains the screen. It\'s useful in rare cases where you want to render something based on the navigation state.","sidebar":"docs"},"use-prevent-remove":{"id":"use-prevent-remove","title":"usePreventRemove","description":"The usePreventRemove hook allows you to prevent the user from leaving a screen. For example, if there are unsaved changes, you might want to show a confirmation dialog before the user can navigate away.","sidebar":"docs"},"use-route":{"id":"use-route","title":"useRoute","description":"useRoute is a hook which gives access to route object. It\'s useful when you cannot pass down the route object from props to the component, or don\'t want to pass it in case of a deeply nested child.","sidebar":"docs"},"use-route-path":{"id":"use-route-path","title":"useRoutePath","description":"The useRoutePath hook can be used to get the path of a route based on the linking configuration. This can be useful if you need to generate a URL for a specific route in your app to share as a deep link.","sidebar":"docs"},"use-scroll-to-top":{"id":"use-scroll-to-top","title":"useScrollToTop","description":"The expected native behavior of scrollable components is to respond to events from navigation that will scroll to top when tapping on the active tab as you would expect from native tab bars.","sidebar":"docs"},"use-theme":{"id":"use-theme","title":"useTheme","description":"The useTheme hook lets us access the currently active theme. You can use it in your own components to have them respond to changes in the theme.","sidebar":"docs"},"used-by":{"id":"used-by","title":"Apps using React Navigation","description":"It\'s impossible to list every single app that uses React Navigation, but below are some of the great apps that we have found that make us feel humbled and proud!","sidebar":"docs"},"web-support":{"id":"web-support","title":"React Navigation on Web","description":"React Navigation has built-in support for the Web platform. This allows you to use the same navigation logic in your React Native app as well as on the web. The navigators require using React Native for Web to work on the web.","sidebar":"docs"}}}}')}}]);